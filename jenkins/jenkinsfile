pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = "51.254.157.210:5000/"  // Remplacer par votre registre
        IMAGE_NAME = "odoo-pregodi"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        LOCAL_IMAGE_NAME = "odoo-pregodi-local"
        DOCKER_CREDENTIALS_ID = "docker-registry-credentials"  // ID des credentials Jenkins pour le registre
        SSH_CREDENTIALS_ID = "ansible-ssh-key"  // ID des credentials SSH pour Ansible
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Docker Image Locally') {
            steps {
                script {
                    // Build d'abord l'image localement avec un nom temporaire
                    sh "docker build -t ${LOCAL_IMAGE_NAME}:${IMAGE_TAG} -f Dockerfile ."
                    
                    // Test local de l'image si nécessaire (optionnel)
                    sh "docker inspect ${LOCAL_IMAGE_NAME}:${IMAGE_TAG}"
                    
                    // Tagger l'image avec le nom du registre distant
                    sh "docker tag ${LOCAL_IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker tag ${LOCAL_IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest"
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    docker.withRegistry("http://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
                        sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest"
                    }
                }
            }
        }
        
        /*stage('Update Kubernetes Manifests') {
            steps {
                script {
                    // Mettre à jour le fichier deployment.yaml avec la nouvelle image
                    sh """
                    sed -i 's|image: odoo-pregodi:latest|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}|g' kubernetes/deployment.yaml
                    sed -i 's|imagePullPolicy: Never|imagePullPolicy: Always|g' kubernetes/deployment.yaml
                    
                    # S'assurer que imagePullSecrets est présent
                    if ! grep -q "imagePullSecrets" kubernetes/deployment.yaml; then
                      sed -i '/volumes:/i\\      imagePullSecrets:\\      - name: regcred' kubernetes/deployment.yaml
                    fi
                    """
                }
            }
        }
        
        stage('Deploy with Ansible') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: "${SSH_CREDENTIALS_ID}", keyFileVariable: 'SSH_KEY')]) {
                    sh """
                    ansible-playbook -i inventory.ini playbook.yml --private-key=${SSH_KEY} -e "docker_registry=${DOCKER_REGISTRY}" -e "image_tag=${IMAGE_TAG}"
                    """
                }
            }
        }*/
    }
    
    post {
        /*always {
            script {
                // Nettoyage des images locales temporaires
                sh "docker rmi ${LOCAL_IMAGE_NAME}:${IMAGE_TAG} || true"
            }
            cleanWs()
        }*/
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}